apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply plugin: 'androidx.navigation.safeargs'

Properties properties = new Properties()
if (project.rootProject.file("release.properties").exists()) {
    properties.load(project.rootProject.file('release.properties').newDataInputStream())
} else {
    properties.load(project.rootProject.file('debug.properties').newDataInputStream())
}
def googleMapsApiKey = properties.getProperty('com.google.android.geo.API_KEY')
def jcDecauxApiKey = properties.getProperty('com.developer.jcdecaux.API_KEY')

android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        applicationId buildConfig.applicationId
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode buildConfig.version.code
        versionName buildConfig.version.name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [googleMapsApiKey: "$googleMapsApiKey",
                                jcDecauxApiKey  : "$jcDecauxApiKey"]
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            applicationIdSuffix = ".debug"
//            ext.enableCrashlytics = false
        }
    }

    flavorDimensions "default"
    productFlavors {
        prod {
            dimension "default"
        }
        mock {
            dimension "default"
            applicationIdSuffix = ".mock"
        }
    }

    android.variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name == 'release' && names.get(0) != "prod") {
            variant.setIgnore(true)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        prod.java.srcDirs += 'src/prod/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        mock.java.srcDirs += 'src/mock/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    // Enables view caching in viewholders.
    // See: https://github.com/Kotlin/KEEP/blob/master/proposals/android-extensions-entity-caching.md
    androidExtensions {
        experimental = true
    }

}

dependencies {
    implementation project(':core')
    implementation project(':database')
    implementation project(':datamodel')
    implementation project(':domain')
    implementation project(':repository')
    implementation project(':ui')
    implementation project(':ui-favourites')
    implementation project(':ui-livedata')
    implementation project(':ui-search')
    implementation project(':ui-settings')

    implementation "androidx.room:room-runtime:${versions.androidx.room_runtime}"
    implementation("com.squareup.retrofit2:converter-gson:2.5.0")
    implementation("com.google.code.gson:gson:2.8.5")
    implementation("com.squareup.retrofit2:converter-simplexml:2.5.0")
    implementation "com.nytimes.android:store3:${versions.store3}"
    implementation("com.squareup.okhttp3:okhttp:3.12.1")

    implementation libraries.rtpi_client

    kapt "com.google.dagger:dagger-compiler:${versions.dagger_compiler}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"
}

apply plugin: 'com.google.gms.google-services'
